//
//  DYBRequest.m
//  DYiBan
//
//  Created by NewM on 13-7-31.
//  Copyright (c) 2013年 ZzL. All rights reserved.
//

#import "DYBRequest.h"

#import "Dragon_Device.h"
#import "Dragon_CommentMethod.h"
#import "JSONKit.h"
#import "JSON.h"
#import "UIView+DragonViewSignal.h"
#import "NSObject+DragonRequestResponder.h"
#import "Dragon_Device.h"
#import "NSObject+DragonDatabase.h"

#import "user.h"
#import "UserSettingMode.h"
#import "status_list.h"
#import "status.h"

@interface DYBRequest ()
{
    id                   receiver;   //http响应接受者
    NSMutableDictionary *requestDict;//http请求参数
    
    
    DragonUIPopAlertView *popView;//提示框
}
@property (nonatomic, retain)NSMutableArray *cacheArr;
@end

@implementation DYBRequest
@synthesize cacheArr = _cacheArr;

- (void)dealloc
{
    RELEASEDICTARRAYOBJ(requestDict);
    RELEASEOBJ(receiver);
    RELEASEOBJ(_cacheArr);
    [super dealloc];
}

- (DragonRequest *)POSTORGET:(NSMutableDictionary *)params
                     isAlert:(BOOL)isAlert
                     receive:(id)_receive
                   imageData:(NSArray *)imageDatas
                      isPost:(BOOL)isPost
{
    
    receiver = [_receive retain];
    
    _cacheArr = [[NSMutableArray alloc] initWithArray:[self handleCache:params]];
//    _cacheArr = nil;
    if ([_cacheArr count] > 0)
    {
        DragonRequest *request = [self GET:@""];

        return request;
    }else
    {
        RELEASEDICTARRAYOBJ(_cacheArr);
    }
    
    
    if ([DragonDevice hasInternetConnection] == NO) {
        
        DragonUIPopAlertView *pop = [[DragonUIPopAlertView alloc] init];
        [pop setDelegate:receiver];
        [pop setMode:DRAGONPOPALERTVIEWNOINDICATOR];
        [pop setText:@"检测不到网络连接！"];
        [pop alertViewAutoHidden:.5f isRelease:YES];
        return nil;
    }
    
    
    NSString *url = [self encodeUrl:params];
    DragonRequest *request = nil;
    if (isPost)
    {
        request = self.HTTP_POST(url);
        
        for (NSData *imageData in imageDatas)
        {
            [request addData:imageData withFileName:@"anykey.jpg" andContentType:@"image/jpeg" forKey:@"image[]"];
        }
        
    }else
    {
        request = [self GET:url];
    }
    
    if ([DragonDevice sysVersion] == 5.0)
    {
        [request setValidatesSecureCertificate:NO];
    }
    
    if (isAlert)
    {
        if (!popView) {
            popView = [[DragonUIPopAlertView alloc] init];
            [popView setDelegate:receiver];
            [popView setIndicatorMode:INDICATORHEADTYPE];
            [popView setText:@"加载中..."];
            [popView alertViewShown];
        }
        
    }
    
    return request;
    
}

//网络请求POST请求为上传图片
- (DragonRequest *)DYBPOSTIMG:(NSMutableDictionary *)params isAlert:(BOOL)isAlert receive:(id)_receive imageData:(NSArray *)imageDatas
{
    DragonRequest *request = [self POSTORGET:params isAlert:isAlert receive:_receive imageData:imageDatas isPost:YES];
    
    return request;
}

//网络请求GET请求
- (DragonRequest *)DYBGET:(NSMutableDictionary *)params isAlert:(BOOL)isAlert receive:(id)_receive
{
    DragonRequest *request = [self POSTORGET:params isAlert:isAlert receive:_receive imageData:nil isPost:NO];
    
    return request;
}

//网络请求协议
- (NSString *)encodeUrl:(NSMutableDictionary *)dict
{
    
    NSString *strDataBank = [dict objectForKey:@"isDataBank"]; //判断来自资料库的接口
    NSString *sendURL = nil;
    if ([strDataBank isEqualToString:@"YES"]) {
        
        [dict removeObjectForKey:@"isDataBank"];
        sendURL = DenJun;
    }else{
        
        sendURL = SHARED.httpUrl;
    }
    
    
    NSString *apn = [DragonDevice networkType];
    NSString *platom = [NSString stringWithFormat:@"ios%.f",[DragonDevice sysVersion]];
    NSMutableDictionary *params = [[NSMutableDictionary alloc] init];
    [params setValue:[dict objectForKey:INTERFACEDOACTION] forKey:@"do"];
    
    [dict removeObjectForKey:INTERFACEDOACTION];
    
    [params setValue:dict forKey:@"data"];
    
    [params setValue:@"69b4d383c3bce72d636d9d8fc043e4af" forKey:@"identify"];//等待有效的解决方案
    
    [params setValue:SHARED.token forKey:@"token"];
    [params setValue:SHARED.sessionID forKey:@"sessID"];
    DLogInfo(@"sessionID -- %@",SHARED.sessionID);
    [params setValue:@"1" forKey:@"ct"];
    [params setValue:SHARED.version forKey:@"v"];
    [params setValue:@"AppStore" forKey:@"rv"];
    [params setValue:apn forKey:@"apn"];
    [params setValue:platom forKey:@"device"];
    
    
    DLogInfo(@"parms -- > %@",params);
    
    
    if (requestDict)
    {
        RELEASEDICTARRAYOBJ(requestDict);
    }
    
    requestDict = [params mutableCopy];
    
    NSString *jsonStr = [DragonCommentMethod encodeURL:[params JSONString]];
    NSString *md5 = [DragonCommentMethod md5:[params JSONString]];
    
    NSString *url = [NSString stringWithFormat:@"%@?json=%@&sig=%@",sendURL, jsonStr, md5];
    DLogInfo(@"%@ 接口的 url === %@",[params objectForKey:@"do"],url);
    return url;
}

//网络响应处理
- (void)handleRequest:(DragonRequest *)request
{
    if (request.succeed)
    {
        
        if (popView)
        {
            [popView alertViewHiddenAndRelease];
            popView = nil;
        }
        
        NSDictionary *dict = [request.responseString JSONValue];
        if (!dict && [_cacheArr count] > 0)
        {
            dict = [NSMutableDictionary dictionaryWithDictionary:[_cacheArr objectAtIndex:0]];
            dict = [dict objectForKey:@"content"];
        }
        DLogInfo(@"request.responseString ----- %@",request.responseString);
        JsonResponse *respose = [JsonResponse JSONReflection:dict];
        
        switch (respose.response)
        {
            case khttpsucceedCode /*| khttpfailCode*/:
            case khttpfailCode:
                if (receiver && [receiver respondsToSelector:@selector(handleRequest:receiveObj:)])
                {
                    
                    if (respose.response == khttpsucceedCode)
                    {
                        [self handleSql:request response:respose];
                    }else
                    {
                        if (SHARED.isLogin || [[requestDict objectForKey:@"do"] isEqualToString:kSecurityLogin])
                        {
                            [DYBShareinstaceDelegate loadFinishAlertView:respose.message target:receiver showTime:1.f];
                        }
                    
                    }
                    
                    [receiver handleRequest:request receiveObj:respose];
                    
                }
                
                break;
                
            case khttpWrongfulCode:
                
                break;
            case khttpSessIDtimeoutCode:
            {
                [request cancelRequests];
                if (receiver && [receiver respondsToSelector:@selector(handleRequest:receiveObj:)])
                {
                    [DYBShareinstaceDelegate loadFinishAlertView:@"未操作时间过长，请重新登陆" target:receiver showTime:.8f];
                    [receiver handleRequest:request receiveObj:respose];
                    SHARED.isLogin = NO;
                    
                    [self deleteSql];
                }
            }
                break;
            case khttpSecurityCode:
                
                break;
            case khttpWrongfulAppCode:
                
                break;
            case khttpNeedUpdateCode:
                
                break;
            case khttpUpdateCode:
                
                break;
            case khttpWrongfulVersionCode:
                
                break;
                
            default:
                break;
        }
    }else if (request.failed)
    {
        if (popView)
        {
            [popView alertViewHiddenAndRelease];
            popView = nil;
        }
        
        if (_cacheArr && [_cacheArr count] > 0)
        {
            [request changeState:STATE_SUCCEED];
            
        }
    }else if (request.created)
    {
        DLogInfo(@"1");
    }else if (request.sending)
    {
        DLogInfo(@"2");
    }else if (request.recving)
    {
        DLogInfo(@"3");
    
    }else if (request.recving)
    {
        DLogInfo(@"ffff");
        DLogInfo(@"s === %f", request.downloadPercent);
    }
}

//数据库处理
- (void)handleSql:(DragonRequest *)request response:(id)_response
{
    JsonResponse *response = (JsonResponse *)_response;
    
    NSString *getMethod = [requestDict objectForKey:@"do"];
    
    //登陆接口
    if ([getMethod isEqualToString:kSecurityLogin] ||
        [getMethod isEqualToString:kSecurityAutologin] ||
        [getMethod isEqualToString:kSecurityReg])
    {
        SHARED.isLogin = YES;
        SHARED.curUser = [user JSONReflection:[[response data] objectForKey:@"user"]];
        SHARED.sessionID = response.sessID;
        SHARED.currentUserSetting = [[UserSettingMode alloc]init];
        DLogInfo(@"SHARED.curUser === %@", SHARED.curUser.pic_s);
        [self insertUser:SHARED.curUser];
        SHARED.userId = SHARED.curUser.userid;
    }else if ([getMethod isEqualToString:kSecurityLogout])
    {//退出接口
        [self deleteSql];
        SHARED.isLogin = NO;
    }else if ([getMethod isEqualToString:kStatusList])
    {//动态列表
        NSDictionary *data = [requestDict objectForKey:@"data"];
        NSString *type = [data objectForKey:@"type"];
        
        if ([type isEqualToString:@"1"])
        {//个人动态
            [self insertStatusList:_response request:request type:1];
        }else if ([type isEqualToString:@"2"])
        {//好友动态
            [self insertStatusList:_response request:request type:2];
        }
        
        
    }else if ([getMethod isEqualToString:kStatusDel])
    {//删除动态
        NSDictionary *data = [requestDict objectForKey:@"data"];
        NSString *delId = [data objectForKey:@"id"];
        
        //删除好友动态
        self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", @"2").GET();
        NSArray *sqlArr = self.DB.resultArray;
        //获得数据库中的动态列
        [self deleteStatuWithId:sqlArr delId:delId];
        
        //删除个人动态
        self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", @"1").GET();
        sqlArr = self.DB.resultArray;
        //获得数据库中的动态列
        [self deleteStatuWithId:sqlArr delId:delId];
        
        
        
    }
    
}

//处理缓存方法
- (NSArray *)handleCache:(NSDictionary *)dict
{
    NSString *method = [dict objectForKey:INTERFACEDOACTION];
    if ([method isEqualToString:kStatusList])
    {
        NSString *type = [dict objectForKey:@"type"];
        NSString *maxid = [dict objectForKey:@"max_id"];
        NSString *lastId = [dict objectForKey:@"last_id"];
        NSString *page = [dict objectForKey:@"page"];
        NSString *num = [dict objectForKey:@"num"];
        
        NSInteger delIndex = [page integerValue];
        NSInteger numNum = [num integerValue];
        
        if (!maxid && [lastId isEqualToString:@"0"])//第一次请求
        {
            self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", type).GET();
            
            NSArray *result = [self deleteStatuWithNum:self.DB.resultArray delIndex:delIndex getNum:numNum];
            DLogInfo(@"result == %d", [result count]);
            
            return result;
        }else if(lastId && [maxid isEqualToString:@"0"])
        {//加载更多
            
            
            self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", type).GET();
            
            NSArray *result = [self deleteStatuWithNum:self.DB.resultArray delIndex:delIndex getNum:numNum];
            
            return result;
            
        }else if([lastId isEqualToString:@"0"] && maxid)
        {//更新
            self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", type).DELETE();
        }
    }
    
    return nil;
}

- (NSArray *)deleteStatuWithNum:(NSArray *)sqlArr delIndex:(NSInteger)delIndex getNum:(NSInteger)getNum
{
    if ([sqlArr count] > 0) {
        NSMutableDictionary *dictsql = [NSMutableDictionary dictionaryWithDictionary:[sqlArr objectAtIndex:0]];

        NSMutableDictionary *dictContentSql = [[dictsql objectForKey:@"content"] JSONValue];
        NSMutableArray *sqlStausList = [[dictContentSql objectForKey:@"data"] objectForKey:@"status"];

        NSInteger deleNum = (delIndex * getNum);
        NSInteger sqlNum = [sqlStausList count];
        if (sqlNum >= deleNum)
        {
            [sqlStausList removeObjectsInRange:NSMakeRange(deleNum, (sqlNum - deleNum))];
            
            if (delIndex > 1)
            {
                [sqlStausList removeObjectsInRange:NSMakeRange(0, ((delIndex-1) * getNum))];
            }
        }else
        {
            return nil;
        }
//        [dictSql setValue:sqlStausList forKey:@"data"];
        NSString *content = [dictContentSql JSONString];
        [dictsql setValue:content forKey:@"content"];
        NSArray *result = [NSArray arrayWithObject:dictsql];
        return result;
    }
    
    return nil;
}


//删除动态数据
- (void)deleteStatuWithId:(NSArray *)sqlArr delId:(NSString *)delId
{
    if ([sqlArr count] > 0) {
        NSMutableDictionary *dicsql = [NSMutableDictionary dictionaryWithDictionary:[sqlArr objectAtIndex:0]];
        JsonResponse *sqlRespose = [JsonResponse JSONReflection:[dicsql objectForKey:@"content"]];
        status_list *sqlStatusList = [status_list JSONReflection:[sqlRespose data]];
        NSMutableDictionary *dictSql = [[dicsql objectForKey:@"content"] JSONValue];
        NSMutableArray *sqlStausList = [[dictSql objectForKey:@"data"] objectForKey:@"status"];
        NSMutableArray *sqlStatusArr = [NSMutableArray arrayWithArray:[sqlStatusList status]];
        
        for (int i = 0; i < [sqlStausList count]; i++)
        {
            status *sqlStatu = [sqlStatusArr objectAtIndex:i];
            NSString *statuId = [NSString stringWithFormat:@"%d", [sqlStatu id]];
            
            if ([statuId isEqualToString:delId])
            {
                [sqlStausList removeObjectAtIndex:i];
                break;
            }
            
        }
        
        if ([sqlStausList count ] < [[sqlStatusList status] count])
        {
            NSString *saveString = [dictSql JSONFragment];
            if (saveString)
            {
                self.DB.FROM(kYIBANSTATUSLISTTABLE).SET(@"content", saveString).UPDATE();
            }
        }
    }
}

//保存个人动态和好友动态
- (void)saveStatus:(NSString *)type request:(DragonRequest *)request statusList:(status_list *)statusList firstStatu:(status *)firstStatu
{
    self.DB.FROM(kYIBANSTATUSLISTTABLE).WHERE(@"type", type).GET();
    
    if ([self.DB.resultArray count] > 0)
    {
        NSDictionary *d = [self.DB.resultArray objectAtIndex:0];
        //获得数据库中的动态列表
        NSMutableDictionary *dicsql = [[NSMutableDictionary alloc] initWithDictionary:d];
       
        NSString *strContent = [dicsql objectForKey:@"content"];
        
        NSMutableDictionary *dictContent = [strContent JSONValue];
        DLogInfo(@"dict === %@", [dictContent objectForKey:@"data"]);
       
        JsonResponse *sqlRespose = [JsonResponse JSONReflection:dictContent];
        status_list *sqlStatusList = [status_list JSONReflection:[sqlRespose data]];
        status *firstSqlStatu = [[sqlStatusList status] objectAtIndex:0];

        NSMutableArray *sqlStausList = [[dictContent objectForKey:@"data"] objectForKey:@"status"];
        
        if (firstSqlStatu.id > firstStatu.id)
        {
            NSString *requstString = [request responseString];
            NSDictionary *reqestDict = [requstString JSONValue];
            NSDictionary *requestdictData = [reqestDict objectForKey:@"data"];
            NSMutableArray *requestDataArr = [requestdictData objectForKey:@"status"];
            [sqlStausList addObjectsFromArray:requestDataArr];
            [[dictContent objectForKey:@"data"] setValue:sqlStausList forKey:@"status"];
            
            NSString *saveString = [dictContent JSONFragment];
            if (saveString)
            {
                self.DB.FROM(kYIBANSTATUSLISTTABLE).SET(@"content", saveString).UPDATE();
            }
            

        }
        
        RELEASEDICTARRAYOBJ(dicsql);

    }else
    {

        DLogInfo(@"SHARED.curUser.useri === %@", SHARED.userId);
        self.DB.FROM(kYIBANSTATUSLISTTABLE)
        .SET(@"content", request.responseString)
        .SET(@"type", type)
        .SET(@"userid", SHARED.userId)
        .INSERT();
    }
}

//保存动态
- (void)insertStatusList:(id)_response request:(DragonRequest *)request type:(NSInteger)type
{
    JsonResponse *response = (JsonResponse *)_response;
    status_list *statusList = [status_list JSONReflection:[response data]];
    if (![[statusList status] count] > 0)
    {
        return;
    }
    
    status *firstStatu = [[statusList status] objectAtIndex:0];
    
    if (type == 1)
    {
        [self saveStatus:@"1" request:request statusList:statusList firstStatu:firstStatu];
        
    }else if(type == 2)
    {
        [self saveStatus:@"2" request:request statusList:statusList firstStatu:firstStatu];
    }

}

//保存user表
- (void)insertUser:(user *)userModel
{
    NSString *username = [[requestDict objectForKey:@"data"] objectForKey:@"username"];
    NSString *password = [[requestDict objectForKey:@"data"] objectForKey:@"password"];
    NSString *userid = [userModel userid];
    NSString *sessionId = SHARED.sessionID;
    NSString *logintype = @"1";
    
    NSDateFormatter *formatter = [SHARED dateFormatter];
    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    NSDate *date = [NSDate new];
    NSString *logintime = [formatter stringFromDate:date];;
    
    self.DB.FROM(kYIBANUSERTABLE).WHERE(@"userid", userid).GET();
    DLogInfo(@"self.DB.resultArray === %@", self.DB.resultArray);
    if ([self.DB.resultArray count] > 0)
    {
        self.DB.FROM(kYIBANUSERTABLE).SET(@"sessionID", sessionId).SET(@"logintime", logintime).SET(@"logintype", logintype).UPDATE();
    }else
    {
        self.DB.FROM(kYIBANUSERTABLE).SET(@"username", username).SET(@"password", password).SET(@"userid", userid).SET(@"sessionID", sessionId).SET(@"logintime", logintime).SET(@"logintype", logintype).INSERT();
    }
}

//删除数据库
- (void)deleteSql
{
    self.DB.FROM(kYIBANUSERTABLE).DELETE();
    self.DB.FROM(kYIBANSTATUSLISTTABLE).DELETE();
    
}

@end
